// Code generated by "enumer --json --linecomment --type=StatKey keys.go"; DO NOT EDIT.

package good

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _StatKeyName = "hphp_atkatk_defdef_critRate_critDMG_eleMasenerRech_heal_physical_dmg_pyro_dmg_hydro_dmg_dendro_dmg_electro_dmg_anemo_dmg_cryo_dmg_geo_dmg_EndStatType"

var _StatKeyIndex = [...]uint8{0, 0, 2, 5, 8, 12, 15, 19, 28, 36, 42, 51, 56, 69, 78, 88, 99, 111, 121, 130, 138, 149}

const _StatKeyLowerName = "hphp_atkatk_defdef_critrate_critdmg_elemasenerrech_heal_physical_dmg_pyro_dmg_hydro_dmg_dendro_dmg_electro_dmg_anemo_dmg_cryo_dmg_geo_dmg_endstattype"

func (i StatKey) String() string {
	if i < 0 || i >= StatKey(len(_StatKeyIndex)-1) {
		return fmt.Sprintf("StatKey(%d)", i)
	}
	return _StatKeyName[_StatKeyIndex[i]:_StatKeyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatKeyNoOp() {
	var x [1]struct{}
	_ = x[UnknownStatKey-(0)]
	_ = x[HP-(1)]
	_ = x[HPP-(2)]
	_ = x[ATK-(3)]
	_ = x[ATKP-(4)]
	_ = x[DEF-(5)]
	_ = x[DEFP-(6)]
	_ = x[CR-(7)]
	_ = x[CD-(8)]
	_ = x[EM-(9)]
	_ = x[ER-(10)]
	_ = x[Heal-(11)]
	_ = x[PhysicalP-(12)]
	_ = x[PyroP-(13)]
	_ = x[HydroP-(14)]
	_ = x[DendroP-(15)]
	_ = x[ElectroP-(16)]
	_ = x[AnemoP-(17)]
	_ = x[CryoP-(18)]
	_ = x[GeoP-(19)]
	_ = x[EndStatType-(20)]
}

var _StatKeyValues = []StatKey{UnknownStatKey, HP, HPP, ATK, ATKP, DEF, DEFP, CR, CD, EM, ER, Heal, PhysicalP, PyroP, HydroP, DendroP, ElectroP, AnemoP, CryoP, GeoP, EndStatType}

var _StatKeyNameToValueMap = map[string]StatKey{
	_StatKeyName[0:0]:          UnknownStatKey,
	_StatKeyLowerName[0:0]:     UnknownStatKey,
	_StatKeyName[0:2]:          HP,
	_StatKeyLowerName[0:2]:     HP,
	_StatKeyName[2:5]:          HPP,
	_StatKeyLowerName[2:5]:     HPP,
	_StatKeyName[5:8]:          ATK,
	_StatKeyLowerName[5:8]:     ATK,
	_StatKeyName[8:12]:         ATKP,
	_StatKeyLowerName[8:12]:    ATKP,
	_StatKeyName[12:15]:        DEF,
	_StatKeyLowerName[12:15]:   DEF,
	_StatKeyName[15:19]:        DEFP,
	_StatKeyLowerName[15:19]:   DEFP,
	_StatKeyName[19:28]:        CR,
	_StatKeyLowerName[19:28]:   CR,
	_StatKeyName[28:36]:        CD,
	_StatKeyLowerName[28:36]:   CD,
	_StatKeyName[36:42]:        EM,
	_StatKeyLowerName[36:42]:   EM,
	_StatKeyName[42:51]:        ER,
	_StatKeyLowerName[42:51]:   ER,
	_StatKeyName[51:56]:        Heal,
	_StatKeyLowerName[51:56]:   Heal,
	_StatKeyName[56:69]:        PhysicalP,
	_StatKeyLowerName[56:69]:   PhysicalP,
	_StatKeyName[69:78]:        PyroP,
	_StatKeyLowerName[69:78]:   PyroP,
	_StatKeyName[78:88]:        HydroP,
	_StatKeyLowerName[78:88]:   HydroP,
	_StatKeyName[88:99]:        DendroP,
	_StatKeyLowerName[88:99]:   DendroP,
	_StatKeyName[99:111]:       ElectroP,
	_StatKeyLowerName[99:111]:  ElectroP,
	_StatKeyName[111:121]:      AnemoP,
	_StatKeyLowerName[111:121]: AnemoP,
	_StatKeyName[121:130]:      CryoP,
	_StatKeyLowerName[121:130]: CryoP,
	_StatKeyName[130:138]:      GeoP,
	_StatKeyLowerName[130:138]: GeoP,
	_StatKeyName[138:149]:      EndStatType,
	_StatKeyLowerName[138:149]: EndStatType,
}

var _StatKeyNames = []string{
	_StatKeyName[0:0],
	_StatKeyName[0:2],
	_StatKeyName[2:5],
	_StatKeyName[5:8],
	_StatKeyName[8:12],
	_StatKeyName[12:15],
	_StatKeyName[15:19],
	_StatKeyName[19:28],
	_StatKeyName[28:36],
	_StatKeyName[36:42],
	_StatKeyName[42:51],
	_StatKeyName[51:56],
	_StatKeyName[56:69],
	_StatKeyName[69:78],
	_StatKeyName[78:88],
	_StatKeyName[88:99],
	_StatKeyName[99:111],
	_StatKeyName[111:121],
	_StatKeyName[121:130],
	_StatKeyName[130:138],
	_StatKeyName[138:149],
}

// StatKeyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatKeyString(s string) (StatKey, error) {
	if val, ok := _StatKeyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatKeyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StatKey values", s)
}

// StatKeyValues returns all values of the enum
func StatKeyValues() []StatKey {
	return _StatKeyValues
}

// StatKeyStrings returns a slice of all String values of the enum
func StatKeyStrings() []string {
	strs := make([]string, len(_StatKeyNames))
	copy(strs, _StatKeyNames)
	return strs
}

// IsAStatKey returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StatKey) IsAStatKey() bool {
	for _, v := range _StatKeyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StatKey
func (i StatKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StatKey
func (i *StatKey) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StatKey should be a string, got %s", data)
	}

	var err error
	*i, err = StatKeyString(s)
	return err
}
