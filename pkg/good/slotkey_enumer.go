// Code generated by "enumer --json --linecomment --type=SlotKey keys.go"; DO NOT EDIT.

package good

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SlotKeyName = "flowerplumesandsgobletcirclet"

var _SlotKeyIndex = [...]uint8{0, 6, 11, 16, 22, 29}

const _SlotKeyLowerName = "flowerplumesandsgobletcirclet"

func (i SlotKey) String() string {
	if i < 0 || i >= SlotKey(len(_SlotKeyIndex)-1) {
		return fmt.Sprintf("SlotKey(%d)", i)
	}
	return _SlotKeyName[_SlotKeyIndex[i]:_SlotKeyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SlotKeyNoOp() {
	var x [1]struct{}
	_ = x[Flower-(0)]
	_ = x[Plume-(1)]
	_ = x[Sands-(2)]
	_ = x[Goblet-(3)]
	_ = x[Circlet-(4)]
}

var _SlotKeyValues = []SlotKey{Flower, Plume, Sands, Goblet, Circlet}

var _SlotKeyNameToValueMap = map[string]SlotKey{
	_SlotKeyName[0:6]:        Flower,
	_SlotKeyLowerName[0:6]:   Flower,
	_SlotKeyName[6:11]:       Plume,
	_SlotKeyLowerName[6:11]:  Plume,
	_SlotKeyName[11:16]:      Sands,
	_SlotKeyLowerName[11:16]: Sands,
	_SlotKeyName[16:22]:      Goblet,
	_SlotKeyLowerName[16:22]: Goblet,
	_SlotKeyName[22:29]:      Circlet,
	_SlotKeyLowerName[22:29]: Circlet,
}

var _SlotKeyNames = []string{
	_SlotKeyName[0:6],
	_SlotKeyName[6:11],
	_SlotKeyName[11:16],
	_SlotKeyName[16:22],
	_SlotKeyName[22:29],
}

// SlotKeyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SlotKeyString(s string) (SlotKey, error) {
	if val, ok := _SlotKeyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SlotKeyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SlotKey values", s)
}

// SlotKeyValues returns all values of the enum
func SlotKeyValues() []SlotKey {
	return _SlotKeyValues
}

// SlotKeyStrings returns a slice of all String values of the enum
func SlotKeyStrings() []string {
	strs := make([]string, len(_SlotKeyNames))
	copy(strs, _SlotKeyNames)
	return strs
}

// IsASlotKey returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SlotKey) IsASlotKey() bool {
	for _, v := range _SlotKeyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SlotKey
func (i SlotKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SlotKey
func (i *SlotKey) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SlotKey should be a string, got %s", data)
	}

	var err error
	*i, err = SlotKeyString(s)
	return err
}
